from ultralytics import YOLO
import cv2
import numpy as np
from PIL import Image
import io
from fastapi import FastAPI, File, UploadFile, Form, HTTPException, Request
from fastapi.responses import StreamingResponse, HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
import json
from typing import Optional
from pydantic import BaseModel
import glob
import os
#import torch
#torch.cuda.is_available = lambda : False  # –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ CPU –¥–ª—è PyTorch

default_mdl_path = './models/'  # –ü—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –º–æ–¥–µ–ª–∏

app = FastAPI(title="Screening System API", version="0.1.0", debug=True)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

def get_latest_model(path):  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∞–º–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–æ–¥–µ–ª–∏
    list_of_files = glob.glob(f'{path}*.pt')
    if not list_of_files:
        return None  # –ù–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    latest_model = max(list_of_files, key=os.path.getctime)  # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª
    print(f'‚ôªÔ∏è  Latest Model: {latest_model}')
    return latest_model


def draw_boxes(image: np.ndarray, results: list) -> np.ndarray:
    for result in results:
        boxes = result.boxes
        for bbox, score, cl in zip(boxes.xyxy.tolist(), boxes.conf.tolist(), boxes.cls.tolist()):
            class_id = int(cl)
            input_box = np.array(bbox)
            color = (0, 100, 255) if class_id == 0 else (0, 200, 0)
            cv2.rectangle(image, (int(input_box[0]), int(input_box[1])), (int(input_box[2]), int(input_box[3])), color, 2)
            label = f"{score:.2f}"
            cv2.putText(image, label, (int(input_box[0]), int(input_box[1]) - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 1)
    return image


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.mount('/static', StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")


@app.get("/", response_class=HTMLResponse)
async def read_root(request: Request):
    ## return templates.TemplateResponse("index.html", {"request": request})
    #model_files_response = list_models()
    #model_files = model_files_response.body  # –í—ã—Ç–∞—â–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ JSONResponse
    #model_files_dict = json.loads(model_files.decode())  # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å
    model_files = list_models()  # —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
    print(f"\nüõí –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {model_files['Models']}")
    return templates.TemplateResponse("index.html", {"request": request, "models": model_files['Models']})


@app.get('/info')
def read_root():
    return {'Project 2023': 'ü©ª Screening System - —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å–º–æ—Ç—Ä–∞ –°–†–ö "Express Inspection" [–≥. –ú–æ—Å–∫–≤–∞, 2023 –≥.]'}


@app.get('/models')
def list_models():
    models_dir = "models"
    models = []

    for filename in os.listdir(models_dir):
        if filename.endswith(".h5") or filename.endswith(".pt"):  # –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–µ–π
            models.append(filename)
    #return JSONResponse(content={"Models": models})
    return {"Models": models}


@app.post('/predict')
async def predict(file: UploadFile = File(...), mdl_name: Optional[str] = Form(None)):
    print("... Received model name:", mdl_name) # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ !!!
    image_stream = io.BytesIO(await file.read())
    image_stream.seek(0)
    image = cv2.imdecode(np.frombuffer(image_stream.read(), np.uint8), 1)
    image_stream.close()

    if image is None:
        return {"error": "Invalid image file"}

    # –ï—Å–ª–∏ –∏–º—è –º–æ–¥–µ–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
    if mdl_name:
        selected_model = os.path.join(default_mdl_path, mdl_name)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏
        if not os.path.exists(selected_model):
            selected_model = get_latest_model(default_mdl_path)
        print(f'‚öñÔ∏è  Selected Model: {selected_model}')
    else:
        selected_model = get_latest_model(default_mdl_path)

    if selected_model is None:
        return {"error": "No model files found"}

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –≤ –ø–∞–º—è—Ç—å
    model = YOLO(selected_model) # if selected_model else None
    results = model.predict(source=image, conf=0.25)
    image = draw_boxes(image, results)

    is_success, buffer = cv2.imencode(".jpg", image)
    if not is_success:
        return {"error": "Failed to save the image"}

    io_buf = io.BytesIO(buffer)
    io_buf.seek(0)
    return StreamingResponse(io_buf, media_type="image/jpeg", headers={"Content-Disposition": f"inline; filename=result.jpg"})


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8001)
