from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging
import requests
import asyncio
import aiohttp
import json
from dotenv import load_dotenv
from io import BytesIO
from datetime import datetime
from PIL import Image
import os

# Load environment variables
load_dotenv()
API_TOKEN = os.getenv("TOKEN")
ADMIN_CHAT_ID = os.getenv("CHAT_ID")
API_URL = 'http://api-serv.ru:8001/models'

if not API_TOKEN:
    raise ValueError("TG_TOKEN is not set in the environment variables or .env file!")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


async def on_startup(dp):
    bot_info = await dp.bot.get_me()
    bot_name = bot_info.username
    await dp.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f'‚ú¥Ô∏è –ë–æ—Ç @{bot_name} –∑–∞–ø—É—â–µ–Ω!')
    print(f'‚ú¥Ô∏è  –ë–æ—Ç {bot_name} –∑–∞–ø—É—â–µ–Ω!')

    # Register bot commands
    commands = [
        types.BotCommand(command="/start", description="‚ôªÔ∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="/help", description="üí° –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
        types.BotCommand(command="/info", description="‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ"),
        types.BotCommand(command="/id", description="ü™™ –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π ID"),
        types.BotCommand(command="/list", description="üìù –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö ID"),
        types.BotCommand(command="/add", description="üõÇ –î–æ–±–∞–≤–∏—Ç—å ID –≤ —Å–ø–∏—Å–æ–∫"),
    ]

    await dp.bot.set_my_commands(commands)


async def fetch(session, url):
    async with session.get(url) as response:
        return await response.text()

@dp.message_handler(commands=['start'])
async def send_info(message: types.Message):
    async with aiohttp.ClientSession() as session:
        info = await fetch(session, API_URL)
        await message.answer(f"Project Info:\n{info}")


@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    help_text = """
*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*

/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
/id - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π ID
/list - –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö ID
/add - –î–æ–±–∞–≤–∏—Ç—å ID –≤ —Å–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.
"""

    await message.reply(help_text, parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(commands=['models'])
async def send_models(message: types.Message):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ HTTP
    async with aiohttp.ClientSession() as session:
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ fetch(), –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å.
        # API_URL –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç.
        models_list = json.loads(await fetch(session, API_URL))

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
        markup = InlineKeyboardMarkup()

        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ 'Models' –≤ –æ—Ç–≤–µ—Ç–µ API ‚Äî —ç—Ç–æ —É–∂–µ —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –º–æ–¥–µ–ª–µ–π
        for model in models_list['Models']:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏. –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω callback_data —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º model
            markup.add(InlineKeyboardButton(model, callback_data=model))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
        await message.answer("Choose a model:", reply_markup=markup)


# handler for receiving images and making POST requests to FastAPI
@dp.message_handler(content_types=types.ContentType.PHOTO)
async def process_image(message: types.Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    file_id = message.photo[-1].file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_data = await bot.download_file(file_path)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    url = API_URL + 'predict'
    response = requests.post(url, files={"image": ("input_image.png", image_data, "image/png")})

    if response.status_code == 200:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        output_image_data = BytesIO(response.content)
        output_image_data.seek(0)
        await message.reply_photo(photo=output_image_data, caption="–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")


async def main():
    await on_startup(dp)
    await dp.start_polling()

if __name__ == '__main__':
    asyncio.run(main())
